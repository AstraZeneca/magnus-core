import logging
from pathlib import Path
from typing import cast

from magnus import defaults
from magnus.extensions.executor.local_container.implementation import LocalContainerExecutor
from magnus.integration import BaseIntegration

from .implementation import FileSystemRunLogstore

logger = logging.getLogger(defaults.LOGGER_NAME)


class LocalComputeFileSystemRunLogStore(BaseIntegration):
    """
    Local compute and File system run log store
    """

    executor_type = "local"
    service_type = "run_log_store"  # One of secret, catalog, datastore
    service_provider = "file-system"  # The actual implementation of the service

    def validate(self, **kwargs):
        if self.executor._is_parallel_execution():
            msg = (
                "Run log generated by file-system run log store are not thread safe. "
                "Inconsistent results are possible because of race conditions to write to the same file.\n"
                "Consider using partitioned run log store like database for consistent results."
            )
            logger.warning(msg)


class LocalContainerComputeFileSystemRunLogstore(BaseIntegration):
    """
    Integration between local container and file system run log store
    """

    executor_type = "local-container"
    service_type = "run_log_store"  # One of secret, catalog, datastore
    service_provider = "file-system"  # The actual implementation of the service

    def validate(self, **kwargs):
        if self.executor._is_parallel_execution():
            msg = (
                "Run log generated by file-system run log store are not thread safe. "
                "Inconsistent results are possible because of race conditions to write to the same file.\n"
                "Consider using partitioned run log store like database for consistent results."
            )
            logger.warning(msg)

    def configure_for_traversal(self, **kwargs):
        self.executor = cast(LocalContainerExecutor, self.executor)
        self.service = cast(FileSystemRunLogstore, self.service)

        write_to = self.service.log_folder_name
        self.executor._volumes[str(Path(write_to).resolve())] = {
            "bind": f"{self.executor._container_log_location}",
            "mode": "rw",
        }

    def configure_for_execution(self, **kwargs):
        self.executor = cast(LocalContainerExecutor, self.executor)
        self.service = cast(FileSystemRunLogstore, self.service)

        self.service.log_folder = self.executor._container_log_location
