[tool.poetry]
name = "magnus"
version = "0"
description = "A Compute agnostic pipelining software"
authors = ["Vijay Vammi <mesanthu@gmail.com>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/AstraZeneca/magnus-core"
repository = "https://github.com/AstraZeneca/magnus-core"
documentation = "https://astrazeneca.github.io/magnus-core/"

[tool.poetry.dependencies]
python = "^3.8"
"ruamel.yaml" = "*"
"ruamel.yaml.clib" = "*"
yachalk = "*"
pydantic = "^1.9.0"
stevedore = "^3.5.0"
"click" = "*"
click-plugins = "^1.1.1"
ploomber-engine ={ version= "^0.0.19", optional = true }
docker ={ version = "*", optional = true }

[tool.poetry.extras]
docker = ['docker']
notebook = ['ploomber-engine']


[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-mock = "*"
mypy = "^0.931"
tox = "^3.24.5"
pre-commit = "*"
ruff = "^0.0.259"
commit-linter = "^1.0.2"
python-semantic-release = "^7.33.1"
ipykernel = "^6.21.2"
interrogate = "^1.5.0"


[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
mkdocs-section-index = "^0.3.5"


[tool.poetry.scripts]
magnus= 'magnus.cli:cli'


# Plugins for Executors
[tool.poetry.plugins."executor"]
"local" = "magnus.executor:LocalExecutor"
"local-container" = "magnus.executor:LocalContainerExecutor"
"demo-renderer" = "magnus.executor:DemoRenderer"

# Plugins for Catalog
[tool.poetry.plugins."catalog"]
"do-nothing" = "magnus.catalog:DoNothingCatalog"
"file-system" = "magnus.catalog:FileSystemCatalog"

# Plugins for Secrets
[tool.poetry.plugins."secrets"]
"do-nothing" = "magnus.secrets:DoNothingSecretManager"
"dotenv" = "magnus.secrets:DotEnvSecrets"
"env-secrets-manager" = "magnus.secrets:EnvSecretsManager"

# Plugins for Run Log store
[tool.poetry.plugins."run_log_store"]
"buffered" = "magnus.datastore:BufferRunLogstore"
"file-system" = "magnus.datastore:FileSystemRunLogstore"
"chunked-fs" = "magnus.datastore:ChunkedFileSystemRunLogStore"

# Plugins for Experiment tracker
[tool.poetry.plugins."experiment_tracker"]
"do-nothing" = "magnus.experiment_tracker:DoNothingTracker"

# Plugins for Pickler
# TODO: Currently not being extended, need to get more use cases
[tool.poetry.plugins."pickler"]
"pickle" = "magnus.pickler:NativePickler"


# Plugins for Integration
[tool.poetry.plugins."integration"]
# The name does not matter, the core would be labelled c
"c1" = "magnus.integration:LocalComputeBufferedRunLogStore"
"c2" = "magnus.integration:LocalComputeFileSystemRunLogStore"
"c3" = "magnus.integration:LocalContainerComputeBufferedRunLogStore"
"c4" = "magnus.integration:LocalContainerComputeFileSystemRunLogstore"
"c5" = "magnus.integration:LocalContainerComputeDotEnvSecrets"
"c6" = "magnus.integration:LocalContainerComputeEnvSecretsManager"
"c7" = "magnus.integration:LocalContainerDoNothingCatalog"
"c8" = "magnus.integration:LocalDoNothingCatalog"
"c9" = "magnus.integration:LocalContainerComputeFileSystemCatalog"
"c10" = "magnus.integration:DemoRenderBufferedRunLogStore"

# Plugins for Tasks
[tool.poetry.plugins."tasks"]
"python" = "magnus.tasks:PythonTaskType"
"python-lambda" = "magnus.tasks:PythonLambdaTaskType"
"shell" = "magnus.tasks:ShellTaskType"
"notebook" = "magnus.tasks:NotebookTaskType"
"python-function" = "magnus.tasks:PythonFunctionType"

# Plugins for Nodes
[tool.poetry.plugins."nodes"]
"task" = "magnus.nodes:TaskNode"
"fail" = "magnus.nodes:FailNode"
"success" = "magnus.nodes:SuccessNode"
"parallel" = "magnus.nodes:ParallelNode"
"map" = "magnus.nodes:MapNode"
"dag" = "magnus.nodes:DagNode"
"as-is" = "magnus.nodes:AsISNode"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 95
exclude = ["setup.py", "docs", "build", "magnus/integration.py"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
# possible values: 0 (minimal output), 1 (-v), 2 (-vv)
verbose = 2
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.black]
line-length = 120

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F","W","I001"]

ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "I"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Builtins

builtins=["__version__"]

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.semantic_release]
branch = "main"
tag_commit = false
version_source = "tag_only"
major_on_zero = true
commit_version_number = false
upload_to_pypi = false
upload_to_repository = false
upload_to_release = false
